  #include "TinyGPS++.h"
#include "SoftwareSerial.h"
#include "LiquidCrystal.h"
LiquidCrystal lcd(8,9,10,11,12,13);
int LAT, LON, ALT;
int contrastPin = A0;
SoftwareSerial serial_connection(5,6); //tx,rx 
TinyGPSPlus gps;// GPS object to process the NMEA data
void setup()
{
  lcd.begin(16,2);
  Serial.begin(9600);                //This opens up communications to the Serial monitor in the Arduino IDE
  serial_connection.begin(9600);     //This opens up communications to the GPS
  Serial.println("GPS Coordinates");        //To show in the serial monitor that the sketch has started
lcd.print("GPS Coordinates:");
}

void loop()
{
  while(serial_connection.available())              //While there are incoming characters  from the GPS
  {
    gps.encode(serial_connection.read());           //This feeds the serial NMEA data into the library one char at a time
  }
  if(gps.location.isUpdated())          //This will pretty much be fired all the time anyway but will at least reduce it to only after a package of NMEA data comes in
  {
    //Get the latest info from the gps object which it derived from the data sent by the GPS unit

    Serial.print("Satellite Count:");
    Serial.println(gps.satellites.value());

    Serial.print("Latitude:");
    Serial.println(gps.location.lat(), 6);
    lcd.setCursor(0,1);
  lcd.print("LAT:");
  lcd.print(gps.location.lat(), 6);
  delay(2000);
    Serial.print("Longitude:");
    Serial.println(gps.location.lng(), 6);
    lcd.setCursor(0,2);
  lcd.print("LON:");
  lcd.print(gps.location.lng(), 6);
  delay(2000);
    Serial.print("Altitude Feet:");
    Serial.println(gps.altitude.feet());
    Serial.println("");
    lcd.setCursor(0,3);
  lcd.print("ALT:");
  lcd.print(gps.altitude.feet());
  delay(2000);
    Serial.print("Date: ");
  if (gps.date.isValid())
  {
    Serial.print(gps.date.month());
    Serial.print("/");
    Serial.print(gps.date.day());
    Serial.print("/");
    Serial.println(gps.date.year());
  }
  
  }
  
}
